import 'ast_parser.dart';

/// Generates Dart code from the converted AST
class DartCodeGenerator {
  
  /// Generate Dart code from a Dart AST
  String generateDart(ProgramNode ast) {
    final buffer = StringBuffer();
    
    // Add file header
    buffer.writeln('// Generated by JavaScript-to-Dart transpiler');
    buffer.writeln('// Manual implementation may be required for placeholder functions');
    buffer.writeln();
    
    for (final node in ast.body) {
      buffer.writeln(_generateNode(node));
      buffer.writeln();
    }
    
    return buffer.toString();
  }
  
  String _generateNode(ASTNode node) {
    if (node is ImportDeclaration) {
      return _generateImport(node);
    } else if (node is ExportDeclaration) {
      return _generateExport(node);
    } else if (node is ClassDeclaration) {
      return _generateClass(node);
    } else if (node is FunctionDeclaration) {
      return _generateFunction(node);
    } else if (node is VariableDeclaration) {
      return _generateVariable(node);
    }
    
    return '// Unknown node type: ${node.runtimeType}';
  }
  
  String _generateImport(ImportDeclaration node) {
    if (node.source.contains('node:') || node.source.contains('crypto') || 
        node.source.contains('fs') || node.source.contains('path')) {
      // Node.js built-in or npm package - create placeholder comment
      return '// PLACEHOLDER: import ${node.source} - needs manual Dart implementation\n'
             '// Original imports: ${node.imports.join(', ')}';
    }
    
    // Convert to Dart import
    if (node.isDefault) {
      return "import '${_convertModulePath(node.source)}';";
    } else {
      return "import '${_convertModulePath(node.source)}';";
    }
  }
  
  String _generateExport(ExportDeclaration node) {
    // Dart doesn't have export keyword, just generate the declaration
    return _generateNode(node.declaration);
  }
  
  String _generateClass(ClassDeclaration node) {
    final buffer = StringBuffer();
    
    // Class declaration
    buffer.write('class ${node.name}');
    if (node.superClass != null) {
      buffer.write(' extends ${node.superClass}');
    }
    buffer.writeln(' {');
    
    // Properties
    for (final property in node.properties) {
      buffer.writeln('  ${_generateProperty(property)}');
    }
    
    if (node.properties.isNotEmpty && node.methods.isNotEmpty) {
      buffer.writeln();
    }
    
    // Methods
    for (final method in node.methods) {
      buffer.writeln('  ${_generateMethod(method)}');
      buffer.writeln();
    }
    
    buffer.writeln('}');
    return buffer.toString();
  }
  
  String _generateProperty(PropertyDefinition property) {
    if (property.initialValue != null) {
      final dartType = _inferDartType(property.initialValue!);
      final dartValue = _convertJsToDartValue(property.initialValue!);
      return '$dartType ${property.name} = $dartValue;';
    } else {
      return 'dynamic ${property.name};';
    }
  }
  
  String _generateMethod(MethodDefinition method) {
    final buffer = StringBuffer();
    
    if (method.isConstructor) {
      // Constructor
      buffer.write('${method.name.split('.').last}(');
      buffer.write(_generateParameters(method.parameters));
      buffer.write(')');
    } else {
      // Regular method
      final returnType = _inferReturnType(method.body);
      buffer.write('$returnType ${method.name}(');
      buffer.write(_generateParameters(method.parameters));
      buffer.write(')');
    }
    
    // Method body
    buffer.write(' ');
    final convertedBody = _convertMethodBody(method.body);
    buffer.write(convertedBody);
    
    return buffer.toString();
  }
  
  String _generateParameters(List<Parameter> parameters) {
    return parameters.map((param) {
      final type = param.type ?? _inferParameterType(param.name);
      if (param.defaultValue != null) {
        return '$type ${param.name} = ${_convertJsToDartValue(param.defaultValue!)}';
      } else {
        return '$type ${param.name}';
      }
    }).join(', ');
  }
  
  String _generateFunction(FunctionDeclaration node) {
    final returnType = _inferReturnType(node.body);
    final buffer = StringBuffer();
    
    if (node.isAsync) {
      buffer.write('Future<$returnType> ');
    } else {
      buffer.write('$returnType ');
    }
    
    buffer.write('${node.name}(');
    buffer.write(_generateParameters(node.parameters));
    buffer.write(') ');
    
    final convertedBody = _convertMethodBody(node.body);
    buffer.write(convertedBody);
    
    return buffer.toString();
  }
  
  String _generateVariable(VariableDeclaration node) {
    if (node.isConst) {
      final type = node.type ?? _inferDartType(node.initialValue ?? 'null');
      final value = _convertJsToDartValue(node.initialValue ?? 'null');
      return 'const $type ${node.name} = $value;';
    } else {
      final type = node.type ?? _inferDartType(node.initialValue ?? 'null');
      if (node.initialValue != null) {
        final value = _convertJsToDartValue(node.initialValue!);
        return '$type ${node.name} = $value;';
      } else {
        return '$type ${node.name};';
      }
    }
  }
  
  String _convertModulePath(String jsPath) {
    // Convert relative paths and common JS modules to Dart equivalents
    if (jsPath.startsWith('./') || jsPath.startsWith('../')) {
      return jsPath.replaceAll('.js', '.dart');
    }
    return 'package:${jsPath.replaceAll('/', '_')}.dart';
  }
  
  String _inferDartType(String jsValue) {
    if (jsValue.startsWith('"') || jsValue.startsWith("'")) {
      return 'String';
    } else if (jsValue == 'true' || jsValue == 'false') {
      return 'bool';
    } else if (RegExp(r'^\d+$').hasMatch(jsValue)) {
      return 'int';
    } else if (RegExp(r'^\d+\.\d+$').hasMatch(jsValue)) {
      return 'double';
    } else if (jsValue.startsWith('[')) {
      return 'List<dynamic>';
    } else if (jsValue.startsWith('{') || jsValue == 'new Map()') {
      return 'Map<String, dynamic>';
    } else if (jsValue == 'null') {
      return 'dynamic';
    } else if (jsValue.startsWith('new ')) {
      final className = jsValue.substring(4).split('(')[0];
      return className;
    }
    return 'dynamic';
  }
  
  String _inferParameterType(String paramName) {
    // Common parameter name patterns to infer types
    if (paramName.contains('index') || paramName.contains('count') || 
        paramName.contains('length') || paramName.contains('size')) {
      return 'int';
    } else if (paramName.contains('text') || paramName.contains('name') || 
               paramName.contains('id') || paramName.contains('key')) {
      return 'String';
    } else if (paramName.contains('flag') || paramName.contains('enabled') || 
               paramName.contains('visible')) {
      return 'bool';
    }
    return 'dynamic';
  }
  
  String _inferReturnType(String methodBody) {
    if (methodBody.contains('return null') || methodBody.contains('return;')) {
      return 'void';
    } else if (methodBody.contains('return "') || methodBody.contains("return '")) {
      return 'String';
    } else if (methodBody.contains('return true') || methodBody.contains('return false')) {
      return 'bool';
    } else if (methodBody.contains('return ') && !methodBody.contains('return;')) {
      return 'dynamic';
    }
    return 'void';
  }
  
  String _convertJsToDartValue(String jsValue) {
    // Convert JavaScript values to Dart equivalents
    if (jsValue == 'new Map()') {
      return '<String, dynamic>{}';
    } else if (jsValue == 'new Set()') {
      return '<dynamic>{}';
    } else if (jsValue.startsWith('new Array(')) {
      return '<dynamic>[]';
    } else if (jsValue == '[]') {
      return '<dynamic>[]';
    } else if (jsValue == '{}') {
      return '<String, dynamic>{}';
    } else if (jsValue.startsWith('new ')) {
      // Constructor call
      final constructor = jsValue.substring(4);
      return constructor;
    }
    return jsValue;
  }
  
  String _convertMethodBody(String jsBody) {
    // Convert JavaScript method body to Dart
    String dartBody = jsBody;
    
    // Convert common JavaScript patterns to Dart
    dartBody = dartBody.replaceAllMapped(
      RegExp(r'new Map\(\)'),
      (match) => '<String, dynamic>{}'
    );
    
    dartBody = dartBody.replaceAllMapped(
      RegExp(r'new Set\(\)'),
      (match) => '<dynamic>{}'
    );
    
    dartBody = dartBody.replaceAllMapped(
      RegExp(r'\.push\('),
      (match) => '.add('
    );
    
    dartBody = dartBody.replaceAllMapped(
      RegExp(r'\.length'),
      (match) => '.length'
    );
    
    dartBody = dartBody.replaceAllMapped(
      RegExp(r'console\.log\('),
      (match) => 'print('
    );
    
    dartBody = dartBody.replaceAllMapped(
      RegExp(r'==='),
      (match) => '=='
    );
    
    dartBody = dartBody.replaceAllMapped(
      RegExp(r'!=='),
      (match) => '!='
    );
    
    // Handle undefined checks
    dartBody = dartBody.replaceAllMapped(
      RegExp(r'(\w+) === undefined'),
      (match) => '${match.group(1)} == null'
    );
    
    dartBody = dartBody.replaceAllMapped(
      RegExp(r'(\w+) !== undefined'),
      (match) => '${match.group(1)} != null'
    );
    
    // Add placeholder comments for complex JavaScript features
    if (dartBody.contains('setTimeout') || dartBody.contains('setInterval')) {
      dartBody = '// PLACEHOLDER: Timer functionality needs manual implementation\n$dartBody';
    }
    
    if (dartBody.contains('Promise') || dartBody.contains('.then(')) {
      dartBody = '// PLACEHOLDER: Promise/Future conversion needed\n$dartBody';
    }
    
    if (dartBody.contains('JSON.')) {
      dartBody = dartBody.replaceAllMapped(
        RegExp(r'JSON\.stringify'),
        (match) => 'jsonEncode'
      );
      dartBody = dartBody.replaceAllMapped(
        RegExp(r'JSON\.parse'),
        (match) => 'jsonDecode'
      );
      dartBody = '// PLACEHOLDER: Add import \'dart:convert\';\n$dartBody';
    }
    
    return dartBody;
  }
}