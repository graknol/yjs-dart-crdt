// Generated by JavaScript-to-Dart transpiler
// Manual implementation may be required for placeholder functions



import 'polyfill.dart';

class YArrayEvent extends YEvent {
  dynamic * @template {ArrayDelta<T,undefined>} [TypeDelta = ArrayDelta<T,undefined>];
  dynamic * @template {T extends AbstractType<any,any,infer DeepD> ? ArrayDelta<Exclude<T,AbstractType<any>>|DeepD,DeepD> : ArrayDelta<T,undefined>} [EventDeltaDeep = T extends AbstractType<any,any,infer DeepD> ? ArrayDelta<Exclude<T,AbstractType<any>>|DeepD,DeepD> : ArrayDelta<T,undefined>];

  void import(dynamic '../utils/types.js')  * @template {import('../utils/types.js').YValue} T


  constructor()   constructor () {
    super()
    /**
     * @type {Array<any>?}
     * @private
     */
    this._prelimContent = []
    /**
     * @type {Array<ArraySearchMarker>}
     */
    this._searchMarker = []
  }


  void import(dynamic '../utils/types.js')    * @template {import('../utils/types.js').YValue} T


  dynamic from(List<dynamic> items)   static from (items) {
    /**
     * @type {YArray<T>}
     */
    const a = new YArray()
    a.add(items)
    return a
  }


  void _integrate(dynamic y, dynamic item)   _integrate (y, item) {
    super._integrate(y, item)
    this.insert(0, /** @type {Array<any>} */ (this._prelimContent))
    this._prelimContent = null
  }


  dynamic _copy()   _copy () {
    return new YArray()
  }


  dynamic clone()   clone () {
    /**
     * @type {YArray<T>}
     */
    const arr = new YArray()
    arr.insert(0, this.toArray().map(el =>
      el instanceof AbstractType ? /** @type {typeof el} */ (el.clone()) : el
    ))
    return arr
  }


  dynamic length()   get length () {
    this.doc ?? warnPrematureAccess()
    return this._length
  }


  void _callObserver(dynamic transaction, dynamic parentSubs)   _callObserver (transaction, parentSubs) {
    super._callObserver(transaction, parentSubs)
    callTypeObservers(this, transaction, new YArrayEvent(this, transaction))
  }


  void insert(int index, dynamic content)   insert (index, content) {
    if (this.doc != null) {
      transact(this.doc, transaction => {
        typeListInsertGenerics(transaction, this, index, /** @type {any} */ (content))
      })
    } else {
      /** @type {Array<any>} */ (this._prelimContent).splice(index, 0, ...content)
    }
  }


  void push(dynamic content)   push (content) {
    if (this.doc != null) {
      transact(this.doc, transaction => {
        typeListPushGenerics(transaction, this, /** @type {any} */ (content))
      })
    } else {
      /** @type {Array<any>} */ (this._prelimContent).add(...content)
    }
  }


  void unshift(dynamic content)   unshift (content) {
    this.insert(0, content)
  }


  void delete(int index, int length = 1)   delete (index, length = 1) {
    if (this.doc != null) {
      transact(this.doc, transaction => {
        typeListDelete(transaction, this, index, length)
      })
    } else {
      /** @type {Array<any>} */ (this._prelimContent).splice(index, length)
    }
  }


  dynamic get(int index)   get (index) {
    return typeListGet(this, index)
  }


  dynamic toArray()   toArray () {
    return typeListToArray(this)
  }


  dynamic getContentDeep(dynamic am = noAttributionsManager)   getContentDeep (am = noAttributionsManager) {
    return /** @type {any} */ (this.getContent(am).map(d => /** @type {any} */ (
      d instanceof delta.InsertArrayOp && d.insert instanceof Array
        ? new delta.InsertArrayOp(d.insert.map(e => e instanceof AbstractType ? e.getContentDeep(am) : e), d.attributes, d.attribution)
        : d
    )))
  }


  dynamic getContent(dynamic am = noAttributionsManager)   getContent (am = noAttributionsManager) {
    return typeListGetContent(this, am)
  }


  dynamic slice(dynamic start = 0, dynamic end = this.length)   slice (start = 0, end = this.length) {
    return typeListSlice(this, start, end)
  }


  dynamic toJSON()   toJSON () {
    return this.map(c => c instanceof AbstractType ? c.toJSON() : c)
  }


  void function(dynamic T, dynamic number, List<dynamic> YArray<T>)    * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array


  dynamic map(dynamic f)   map (f) {
    return typeListMap(this, /** @type {any} */ (f))
  }


  void function(dynamic T, dynamic number, List<dynamic> YArray<T>)    * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.


  void forEach(dynamic f)   forEach (f) {
    typeListForEach(this, f)
  }


  dynamic ()   [Symbol.iterator] () {
    return typeListCreateIterator(this)
  }


  void _write(dynamic encoder)   _write (encoder) {
    encoder.writeTypeRef(YArrayRefID)
  }


}


class YArray extends AbstractType {
  constructor()   constructor () {
    super()
    /**
     * @type {Array<any>?}
     * @private
     */
    this._prelimContent = []
    /**
     * @type {Array<ArraySearchMarker>}
     */
    this._searchMarker = []
  }


  void import(dynamic '../utils/types.js')    * @template {import('../utils/types.js').YValue} T


  dynamic from(List<dynamic> items)   static from (items) {
    /**
     * @type {YArray<T>}
     */
    const a = new YArray()
    a.add(items)
    return a
  }


  void _integrate(dynamic y, dynamic item)   _integrate (y, item) {
    super._integrate(y, item)
    this.insert(0, /** @type {Array<any>} */ (this._prelimContent))
    this._prelimContent = null
  }


  dynamic _copy()   _copy () {
    return new YArray()
  }


  dynamic clone()   clone () {
    /**
     * @type {YArray<T>}
     */
    const arr = new YArray()
    arr.insert(0, this.toArray().map(el =>
      el instanceof AbstractType ? /** @type {typeof el} */ (el.clone()) : el
    ))
    return arr
  }


  dynamic length()   get length () {
    this.doc ?? warnPrematureAccess()
    return this._length
  }


  void _callObserver(dynamic transaction, dynamic parentSubs)   _callObserver (transaction, parentSubs) {
    super._callObserver(transaction, parentSubs)
    callTypeObservers(this, transaction, new YArrayEvent(this, transaction))
  }


  void insert(int index, dynamic content)   insert (index, content) {
    if (this.doc != null) {
      transact(this.doc, transaction => {
        typeListInsertGenerics(transaction, this, index, /** @type {any} */ (content))
      })
    } else {
      /** @type {Array<any>} */ (this._prelimContent).splice(index, 0, ...content)
    }
  }


  void push(dynamic content)   push (content) {
    if (this.doc != null) {
      transact(this.doc, transaction => {
        typeListPushGenerics(transaction, this, /** @type {any} */ (content))
      })
    } else {
      /** @type {Array<any>} */ (this._prelimContent).add(...content)
    }
  }


  void unshift(dynamic content)   unshift (content) {
    this.insert(0, content)
  }


  void delete(int index, int length = 1)   delete (index, length = 1) {
    if (this.doc != null) {
      transact(this.doc, transaction => {
        typeListDelete(transaction, this, index, length)
      })
    } else {
      /** @type {Array<any>} */ (this._prelimContent).splice(index, length)
    }
  }


  dynamic get(int index)   get (index) {
    return typeListGet(this, index)
  }


  dynamic toArray()   toArray () {
    return typeListToArray(this)
  }


  dynamic getContentDeep(dynamic am = noAttributionsManager)   getContentDeep (am = noAttributionsManager) {
    return /** @type {any} */ (this.getContent(am).map(d => /** @type {any} */ (
      d instanceof delta.InsertArrayOp && d.insert instanceof Array
        ? new delta.InsertArrayOp(d.insert.map(e => e instanceof AbstractType ? e.getContentDeep(am) : e), d.attributes, d.attribution)
        : d
    )))
  }


  dynamic getContent(dynamic am = noAttributionsManager)   getContent (am = noAttributionsManager) {
    return typeListGetContent(this, am)
  }


  dynamic slice(dynamic start = 0, dynamic end = this.length)   slice (start = 0, end = this.length) {
    return typeListSlice(this, start, end)
  }


  dynamic toJSON()   toJSON () {
    return this.map(c => c instanceof AbstractType ? c.toJSON() : c)
  }


  void function(dynamic T, dynamic number, List<dynamic> YArray<T>)    * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array


  dynamic map(dynamic f)   map (f) {
    return typeListMap(this, /** @type {any} */ (f))
  }


  void function(dynamic T, dynamic number, List<dynamic> YArray<T>)    * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.


  void forEach(dynamic f)   forEach (f) {
    typeListForEach(this, f)
  }


  dynamic ()   [Symbol.iterator] () {
    return typeListCreateIterator(this)
  }


  void _write(dynamic encoder)   _write (encoder) {
    encoder.writeTypeRef(YArrayRefID)
  }


}


const dynamic a = YArray();

const dynamic arr = YArray();

