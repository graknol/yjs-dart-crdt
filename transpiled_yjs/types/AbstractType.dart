// Generated by JavaScript-to-Dart transpiler
// Manual implementation may be required for placeholder functions









import 'polyfill.dart';

const int maxSearchMarker = 80;

int globalSearchMarkerTimestamp = 0;

class ArraySearchMarker {
  constructor(dynamic p, int index)   constructor (p, index) {
    p.marker = true
    this.p = p
    this.index = index
    this.timestamp = globalSearchMarkerTimestamp++
  }


}


const dynamic refreshMarkerTimestamp = marker => { marker.timestamp = globalSearchMarkerTimestamp++ };

const dynamic overwriteMarker = (marker, p, index) => {;

const dynamic markPosition = (searchMarker, p, index) => {;

const dynamic marker = searchMarker.reduce((a, b) => a.timestamp < b.timestamp ? a : b);

const dynamic pm = ArraySearchMarker(p, index);

const dynamic marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce((a, b) => math.abs(index - a.index) < math.abs(index - b.index) ? a : b);

dynamic p = yarray._start;

int pindex = 0;

const dynamic m = searchMarker[i];

dynamic p = m.p;

dynamic s = t._start;

const List<dynamic> arr = <dynamic>[];

const dynamic changedType = type;

const dynamic changedParentTypes = transaction.changedParentTypes;

class AbstractType {
  constructor()   constructor () {
    /**
     * @type {Item|null}
     */
    this._item = null
    /**
     * @type {Map<string,Item>}
     */
    this._map = <String, dynamic>{}
    /**
     * @type {Item|null}
     */
    this._start = null
    /**
     * @type {Doc|null}
     */
    this.doc = null
    this._length = 0
    /**
     * Event handlers
     * @type {EventHandler<EventType,Transaction>}
     */
    this._eH = createEventHandler()
    /**
     * Deep event handlers
     * @type {EventHandler<Array<YEvent<any>>,Transaction>}
     */
    this._dEH = createEventHandler()
    /**
     * @type {null | Array<ArraySearchMarker>}
     */
    this._searchMarker = null
  }


  dynamic parent()   get parent () {
    return this._item ? /** @type {AbstractType<any,any>} */ (this._item.parent) : null
  }


  void _integrate(dynamic y, dynamic item)   _integrate (y, item) {
    this.doc = y
    this._item = item
  }


  void _copy()   _copy () {
    throw error.methodUnimplemented()
  }


  void clone()   clone () {
    throw error.methodUnimplemented()
  }


  void _write(dynamic _encoder)   _write (_encoder) { }


  dynamic _first()   get _first () {
    let n = this._start
    while (n != null && n.deleted) {
      n = n.right
    }
    return n
  }


  void _callObserver(dynamic transaction, dynamic _parentSubs)   _callObserver (transaction, _parentSubs) {
    if (!transaction.local && this._searchMarker) {
      this._searchMarker.length = 0
    }
  }


  void function(dynamic EventType, dynamic Transaction)    * @param {function(EventType, Transaction):void} f Observer function


  void observe(dynamic f)   observe (f) {
    addEventHandlerListener(this._eH, f)
  }


  void function(List<dynamic> Array<YEvent<any>>, dynamic Transaction)    * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function


  void observeDeep(dynamic f)   observeDeep (f) {
    addEventHandlerListener(this._dEH, f)
  }


  void function(dynamic EventType, dynamic Transaction)    * @param {function(EventType,Transaction):void} f Observer function


  void unobserve(dynamic f)   unobserve (f) {
    removeEventHandlerListener(this._eH, f)
  }


  void function(List<dynamic> Array<YEvent<any>>, dynamic Transaction)    * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function


  void unobserveDeep(dynamic f)   unobserveDeep (f) {
    removeEventHandlerListener(this._dEH, f)
  }


  void toJSON()   toJSON () {}


  void getContent(dynamic _am)   getContent (_am) {
    error.methodUnimplemented()
  }


  void getContentDeep(dynamic _am)   getContentDeep (_am) {
    error.methodUnimplemented()
  }


}


dynamic n = this._start;

dynamic len = end - start;

const List<dynamic> cs = <dynamic>[];

dynamic n = type._start;

const dynamic c = n.content.getContent();

const List<dynamic> cs = <dynamic>[];

dynamic n = type._start;

const dynamic c = n.content.getContent();

const dynamic d = delta.createArrayDelta();

const List<dynamic> cs = <dynamic>[];

const dynamic c = cs[i];

const dynamic attribution = createAttributionFromAttributionItems(c.attrs, c.deleted);

const List<dynamic> cs = <dynamic>[];

dynamic n = type._start;

const dynamic c = n.content.getContent();

int index = 0;

dynamic n = type._start;

const dynamic c = n.content.getContent();

const List<dynamic> result = <dynamic>[];

dynamic n = type._start;

dynamic currentContent = null;

int currentContentIndex = 0;

const dynamic value = currentContent[currentContentIndex++];

int index = 0;

dynamic n = type._start;

const dynamic c = n.content.getContent();

const dynamic marker = findMarker(type, index);

dynamic n = type._start;

dynamic left = referenceItem;

const dynamic doc = transaction.doc;

const dynamic ownClientId = doc.clientID;

const dynamic store = doc.store;

const dynamic right = referenceItem === null ? parent._start : referenceItem.right;

List<dynamic> jsonContent = <dynamic>[];

const dynamic packJsonContent = () => {;

const dynamic lengthExceeded = () => error.create('Length exceeded!');

const dynamic startIndex = index;

const dynamic marker = findMarker(parent, index);

dynamic n = parent._start;

const dynamic marker = (parent._searchMarker || []).reduce((maxMarker, currMarker) => currMarker.index > maxMarker.index ? currMarker : maxMarker, { index: 0, p: parent._start });

dynamic n = marker.p;

const dynamic startIndex = index;

const dynamic startLength = length;

const dynamic marker = findMarker(parent, index);

dynamic n = parent._start;

const dynamic c = parent._map.get(key);

const dynamic left = parent._map.get(key) || null;

const dynamic doc = transaction.doc;

const dynamic ownClientId = doc.clientID;

dynamic content;

const dynamic val = parent._map.get(key);

const Map<String, dynamic> res = <String, dynamic>{};

const dynamic mapdelta = /** @type {delta.MapDeltaBuilder<{ [key:string]: MapType }>} */ (delta.createMapDelta());

const List<dynamic> cs = <dynamic>[];

const dynamic  = null;

const dynamic c = array.last(content.getContent());

const dynamic attribution = createAttributionFromAttributionItems(attrs, deleted);

List<dynamic> cs = <dynamic>[];

const List<dynamic> tmpcs = <dynamic>[];

const dynamic prevValue = cs.length > 0 ? array.last(cs[0].content.getContent()) : undefined;

const dynamic val = parent._map.get(key);

dynamic v = parent._map.get(key) || null;

const Map<String, dynamic> res = <String, dynamic>{};

dynamic v = value;

