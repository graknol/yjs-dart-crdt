// Generated by JavaScript-to-Dart transpiler
// Manual implementation may be required for placeholder functions

import 'package:placeholders.dart.dart';

import 'package:placeholders.dart.dart';

import 'package:placeholders.dart.dart';

class DSDecoderV1 {
  constructor(dynamic decoder)   constructor (decoder) {
    this.restDecoder = decoder
  }


  void resetDsCurVal()   resetDsCurVal () {
    // nop
  }


  dynamic readDsClock()   readDsClock () {
    return decoding.readVarUint(this.restDecoder)
  }


  dynamic readDsLen()   readDsLen () {
    return decoding.readVarUint(this.restDecoder)
  }


}


class UpdateDecoderV1 extends DSDecoderV1 {
  dynamic readLeftID()   readLeftID () {
    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))
  }


  dynamic readRightID()   readRightID () {
    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))
  }


  dynamic readClient()   readClient () {
    return decoding.readVarUint(this.restDecoder)
  }


  dynamic readInfo()   readInfo () {
    return decoding.readUint8(this.restDecoder)
  }


  dynamic readString()   readString () {
    return decoding.readVarString(this.restDecoder)
  }


  dynamic readParentInfo()   readParentInfo () {
    return decoding.readVarUint(this.restDecoder) == 1
  }


  dynamic readTypeRef()   readTypeRef () {
    return decoding.readVarUint(this.restDecoder)
  }


  dynamic readLen()   readLen () {
    return decoding.readVarUint(this.restDecoder)
  }


  dynamic readAny()   readAny () {
    return decoding.readAny(this.restDecoder)
  }


  dynamic readBuf()   readBuf () {
    return buffer.copyUint8Array(decoding.readVarUint8Array(this.restDecoder))
  }


  dynamic readJSON() // PLACEHOLDER: Add import 'dart:convert';
  readJSON () {
    return jsonDecode(decoding.readVarString(this.restDecoder))
  }


  dynamic readKey()   readKey () {
    return decoding.readVarString(this.restDecoder)
  }


}


class DSDecoderV2 {
  constructor(dynamic decoder)   constructor (decoder) {
    /**
     * @private
     */
    this.dsCurrVal = 0
    this.restDecoder = decoder
  }


  void resetDsCurVal()   resetDsCurVal () {
    this.dsCurrVal = 0
  }


  dynamic readDsClock()   readDsClock () {
    this.dsCurrVal += decoding.readVarUint(this.restDecoder)
    return this.dsCurrVal
  }


  dynamic readDsLen()   readDsLen () {
    const diff = decoding.readVarUint(this.restDecoder) + 1
    this.dsCurrVal += diff
    return diff
  }


}


const dynamic diff = decoding.readVarUint(this.restDecoder) + 1;

class UpdateDecoderV2 extends DSDecoderV2 {
  constructor(dynamic decoder)   constructor (decoder) {
    super(decoder)
    /**
     * List of cached keys. If the keys[id] does not exist, we read a new key
     * from stringEncoder and push it to keys.
     *
     * @type {Array<string>}
     */
    this.keys = []
    decoding.readVarUint(decoder) // read feature flag - currently unused
    this.keyClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))
    this.clientDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))
    this.leftClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))
    this.rightClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))
    this.infoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8)
    this.stringDecoder = new decoding.StringDecoder(decoding.readVarUint8Array(decoder))
    this.parentInfoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8)
    this.typeRefDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))
    this.lenDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))
  }


  dynamic readLeftID()   readLeftID () {
    return new ID(this.clientDecoder.read(), this.leftClockDecoder.read())
  }


  dynamic readRightID()   readRightID () {
    return new ID(this.clientDecoder.read(), this.rightClockDecoder.read())
  }


  dynamic readClient()   readClient () {
    return this.clientDecoder.read()
  }


  dynamic readInfo()   readInfo () {
    return /** @type {number} */ (this.infoDecoder.read())
  }


  dynamic readString()   readString () {
    return this.stringDecoder.read()
  }


  dynamic readParentInfo()   readParentInfo () {
    return this.parentInfoDecoder.read() == 1
  }


  dynamic readTypeRef()   readTypeRef () {
    return this.typeRefDecoder.read()
  }


  dynamic readLen()   readLen () {
    return this.lenDecoder.read()
  }


  dynamic readAny()   readAny () {
    return decoding.readAny(this.restDecoder)
  }


  dynamic readBuf()   readBuf () {
    return decoding.readVarUint8Array(this.restDecoder)
  }


  dynamic readJSON()   readJSON () {
    return decoding.readAny(this.restDecoder)
  }


  dynamic readKey()   readKey () {
    const keyClock = this.keyClockDecoder.read()
    if (keyClock < this.keys.length) {
      return this.keys[keyClock]
    } else {
      const key = this.stringDecoder.read()
      this.keys.add(key)
      return key
    }
  }


}


const dynamic keyClock = this.keyClockDecoder.read();

const dynamic key = this.stringDecoder.read();

