// Generated by JavaScript-to-Dart transpiler
// Manual implementation may be required for placeholder functions

import 'package:placeholders.dart.dart';

import 'package:placeholders.dart.dart';

import 'package:placeholders.dart.dart';

class YXmlElement extends YXmlFragment {
  Map<String, dynamic> * @param {Object<string, any>} [hooks = {}] Optional property to customize how hooks;

  constructor(String nodeName = 'UNDEFINED')   constructor (nodeName = 'UNDEFINED') {
    super()
    this.nodeName = nodeName
    /**
     * @type {Map<string, any>|null}
     */
    this._prelimAttrs = <String, dynamic>{}
  }


  dynamic nextSibling()   get nextSibling () {
    const n = this._item ? this._item.next : null
    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null
  }


  dynamic prevSibling()   get prevSibling () {
    const n = this._item ? this._item.prev : null
    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null
  }


  void _integrate(dynamic y, dynamic item)   _integrate (y, item) {
    super._integrate(y, item)
    ;(/** @type {Map<string, any>} */ (this._prelimAttrs)).forEach((value, key) => {
      this.setAttribute(key, value)
    })
    this._prelimAttrs = null
  }


  dynamic _copy()   _copy () {
    return new YXmlElement(this.nodeName)
  }


  dynamic clone()   clone () {
    /**
     * @type {YXmlElement<KV>}
     */
    const el = new YXmlElement(this.nodeName)
    const attrs = this.getAttributes()
    object.forEach(attrs, (value, key) => {
      if (typeof value == 'string') {
        el.setAttribute(key, value)
      }
    })
    // @ts-ignore
    el.insert(0, this.toArray().map(item => item instanceof AbstractType ? item.clone() : item))
    return el
  }


  dynamic toString()   toString () {
    const attrs = this.getAttributes()
    const stringBuilder = []
    const keys = []
    for (const key in attrs) {
      keys.add(key)
    }
    keys.sort()
    const keysLen = keys.length
    for (let i = 0; i < keysLen; i++) {
      const key = keys[i]
      stringBuilder.add(key + '="' + attrs[key] + '"')
    }
    const nodeName = this.nodeName.toLocaleLowerCase()
    const attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : ''
    return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`
  }


  void removeAttribute(String attributeName)   removeAttribute (attributeName) {
    if (this.doc != null) {
      transact(this.doc, transaction => {
        typeMapDelete(transaction, this, attributeName)
      })
    } else {
      /** @type {Map<string,any>} */ (this._prelimAttrs).remove(attributeName)
    }
  }


  void setAttribute(String attributeName, dynamic attributeValue)   setAttribute (attributeName, attributeValue) {
    if (this.doc != null) {
      transact(this.doc, transaction => {
        typeMapSet(transaction, this, attributeName, attributeValue)
      })
    } else {
      /** @type {Map<string, any>} */ (this._prelimAttrs)[attributeName] = attributeValue
    }
  }


  dynamic getAttribute(String attributeName)   getAttribute (attributeName) {
    return /** @type {any} */ (typeMapGet(this, attributeName))
  }


  dynamic hasAttribute(String attributeName)   hasAttribute (attributeName) {
    return /** @type {any} */ (typeMapHas(this, attributeName))
  }


  dynamic getAttributes(dynamic snapshot)   getAttributes (snapshot) {
    return /** @type {any} */ (snapshot ? typeMapGetAllSnapshot(this, snapshot) : typeMapGetAll(this))
  }


  dynamic import(dynamic './AbstractType.js')    * @return {{ nodeName: string, children: delta.ArrayDeltaBuilder<Array<import('./AbstractType.js').DeepContent>>, attributes: import('./AbstractType.js').MapAttributedContent<any> }}


  dynamic getContentDeep(dynamic am = noAttributionsManager)   getContentDeep (am = noAttributionsManager) {
    const { children: origChildren, attributes: origAttributes } = this.getContent(am)
    const children = origChildren.map(d => /** @type {any} */ (
      (d instanceof delta.InsertArrayOp && d.insert instanceof Array)
        ? new delta.InsertArrayOp(d.insert.map(e => e instanceof AbstractType ? /** @type {delta.ArrayDeltaBuilder<Array<any>>} */ (e.getContentDeep(am)) : e), d.attributes, d.attribution)
        : d
    ))
    /**
     * @todo there is a Attributes type and a DeepAttributes type.
     * @type {delta.MapDeltaBuilder<any,any>}
     */
    const attributes = delta.createMapDelta()
    origAttributes.forEach(
      null,
      (insertOp, key) => {
        if (insertOp.value instanceof AbstractType) {
          attributes[key] = insertOp.value.getContentDeep(am, null, insertOp.attribution)
        } else {
          attributes[key] = insertOp.value, undefined, insertOp.attribution
        }
      }
    )
    return delta.createXmlDelta(this.nodeName, children, attributes)
  }


  void import(dynamic '../internals.js')    * @param {import('../internals.js').AbstractAttributionManager} am


  dynamic getContent(dynamic am = noAttributionsManager)   getContent (am = noAttributionsManager) {
    const { children } = super.getContent(am)
    const attributes = typeMapGetDelta(this, am)
    return new delta.XmlDelta(this.nodeName, children, attributes)
  }


  void ()    * @param {Document} [_document=document] The document object (you must define


  dynamic toDOM(dynamic _document = document, dynamic hooks = <String, dynamic>{}, dynamic binding)   toDOM (_document = document, hooks = {}, binding) {
    const dom = _document.createElement(this.nodeName)
    const attrs = this.getAttributes()
    for (const key in attrs) {
      const value = attrs[key]
      if (typeof value == 'string') {
        dom.setAttribute(key, value)
      }
    }
    typeListForEach(this, yxml => {
      dom.appendChild(yxml.toDOM(_document, hooks, binding))
    })
    if (binding != undefined) {
      binding._createAssociation(dom, this)
    }
    return dom
  }


  void _write(dynamic encoder)   _write (encoder) {
    encoder.writeTypeRef(YXmlElementRefID)
    encoder.writeKey(this.nodeName)
  }


}


const dynamic n = this._item ? this._item.next : null;

const dynamic n = this._item ? this._item.prev : null;

const dynamic el = YXmlElement(this.nodeName);

const dynamic attrs = this.getAttributes();

const dynamic attrs = this.getAttributes();

const List<dynamic> stringBuilder = <dynamic>[];

const List<dynamic> keys = <dynamic>[];

const dynamic keysLen = keys.length;

const dynamic key = keys[i];

const dynamic nodeName = this.nodeName.toLocaleLowerCase();

const dynamic attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : '';

const dynamic  = null;

const dynamic children = origChildren.map(d => /** @type {any} */ (;

const dynamic attributes = delta.createMapDelta();

const dynamic  = null;

const dynamic attributes = typeMapGetDelta(this, am);

const dynamic dom = _document.createElement(this.nodeName);

const dynamic attrs = this.getAttributes();

const dynamic value = attrs[key];

