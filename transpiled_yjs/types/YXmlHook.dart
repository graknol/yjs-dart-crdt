// Generated by JavaScript-to-Dart transpiler
// Manual implementation may be required for placeholder functions

import 'package:placeholders.dart.dart';

class YXmlHook extends YMap {
  constructor(String hookName)   constructor (hookName) {
    super()
    /**
     * @type {string}
     */
    this.hookName = hookName
  }


  dynamic _copy()   _copy () {
    return new YXmlHook(this.hookName)
  }


  dynamic clone()   clone () {
    const el = new YXmlHook(this.hookName)
    this.forEach((value, key) => {
      el[key] = value
    })
    return el
  }


  void ()    * @param {Document} [_document=document] The document object (you must define


  dynamic toDOM(dynamic _document = document, dynamic hooks = <String, dynamic>{}, dynamic binding)   toDOM (_document = document, hooks = {}, binding) {
    const hook = hooks[this.hookName]
    let dom
    if (hook != undefined) {
      dom = hook.createDom(this)
    } else {
      dom = document.createElement(this.hookName)
    }
    dom.setAttribute('data-yjs-hook', this.hookName)
    if (binding != undefined) {
      binding._createAssociation(dom, this)
    }
    return dom
  }


  void _write(dynamic encoder)   _write (encoder) {
    encoder.writeTypeRef(YXmlHookRefID)
    encoder.writeKey(this.hookName)
  }


}


const dynamic el = YXmlHook(this.hookName);

const dynamic hook = hooks[this.hookName];

dynamic dom;

