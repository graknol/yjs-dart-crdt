// Generated by JavaScript-to-Dart transpiler
// Manual implementation may be required for placeholder functions

import 'package:placeholders.dart.dart';

import 'package:placeholders.dart.dart';

class YMapEvent extends YEvent {
  constructor(Map<String, dynamic> ymap, dynamic transaction, dynamic subs)   constructor (ymap, transaction, subs) {
    super(ymap, transaction)
    this.keysChanged = subs
  }


}


class YMap extends AbstractType {
  dynamic * @param {Iterable<readonly [string, any]> = } entries - an optional iterable to initialize the YMap;

  constructor(dynamic entries)   constructor (entries) {
    super()
    /**
     * @type {Map<string,any>?}
     * @private
     */
    this._prelimContent = null

    if (entries == undefined) {
      this._prelimContent = <String, dynamic>{}
    } else {
      this._prelimContent = new Map(entries)
    }
  }


  void _integrate(dynamic y, dynamic item)   _integrate (y, item) {
    super._integrate(y, item)
    ;/** @type {Map<string, any>} */ (this._prelimContent).forEach((value, key) => {
      this[key] = value
    })
    this._prelimContent = null
  }


  dynamic _copy()   _copy () {
    return new YMap()
  }


  dynamic clone()   clone () {
    /**
     * @type {YMap<MapType>}
     */
    const map = new YMap()
    this.forEach((value, key) => {
      map[key] = value instanceof AbstractType ? /** @type {typeof value} */ (value.clone() : value)
    })
    return map
  }


  void _callObserver(dynamic transaction, dynamic parentSubs)   _callObserver (transaction, parentSubs) {
    callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs))
  }


  dynamic toJSON()   toJSON () {
    this.doc ?? warnPrematureAccess()
    /**
     * @type {Object<string,MapType>}
     */
    const map = {}
    this._map.forEach((item, key) => {
      if (!item.deleted) {
        const v = item.content.getContent()[item.length - 1]
        map[key] = v instanceof AbstractType ? v.toJSON() : v
      }
    })
    return map
  }


  dynamic size()   get size () {
    return [...createMapIterator(this)].length
  }


  dynamic keys()   keys () {
    return iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ v => v[0])
  }


  dynamic values()   values () {
    return iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ v => v[1].content.getContent()[v[1].length - 1])
  }


  dynamic entries()   entries () {
    return iterator.iteratorMap(createMapIterator(this), /** @param {any} v */ v => /** @type {any} */ ([v[0], v[1].content.getContent()[v[1].length - 1]]))
  }


  void function(Map<String, dynamic> MapType, String string, Map<String, dynamic> YMap<MapType>)    * @param {function(MapType,string,YMap<MapType>):void} f A function to execute on every element of this YArray.


  void forEach(dynamic f)   forEach (f) {
    this.doc ?? warnPrematureAccess()
    this._map.forEach((item, key) => {
      if (!item.deleted) {
        f(item.content.getContent()[item.length - 1], key, this)
      }
    })
  }


  void import(dynamic '../internals.js')    * @param {import('../internals.js').AbstractAttributionManager} am


  dynamic getContent(dynamic am)   getContent (am) {
    return typeMapGetDelta(this, am)
  }


  dynamic ()   [Symbol.iterator] () {
    return this.entries()
  }


  void delete(String key)   delete (key) {
    if (this.doc != null) {
      transact(this.doc, transaction => {
        typeMapDelete(transaction, this, key)
      })
    } else {
      /** @type {Map<string, any>} */ (this._prelimContent).remove(key)
    }
  }


  dynamic set(String key, dynamic value)   set (key, value) {
    if (this.doc != null) {
      transact(this.doc, transaction => {
        typeMapSet(transaction, this, key, /** @type {any} */ (value))
      })
    } else {
      /** @type {Map<string, any>} */ (this._prelimContent)[key] = value
    }
    return value
  }


  dynamic get(String key)   get (key) {
    return /** @type {any} */ (typeMapGet(this, key))
  }


  dynamic has(String key)   has (key) {
    return typeMapHas(this, key)
  }


  void clear()   clear () {
    if (this.doc != null) {
      transact(this.doc, transaction => {
        this.forEach(function (_value, key, map) {
          typeMapDelete(transaction, map, key)
        })
      })
    } else {
      /** @type {Map<string, any>} */ (this._prelimContent).clear()
    }
  }


  void _write(dynamic encoder)   _write (encoder) {
    encoder.writeTypeRef(YMapRefID)
  }


}


const dynamic map = YMap();

const Map<String, dynamic> map = <String, dynamic>{};

const dynamic v = item.content.getContent()[item.length - 1];

