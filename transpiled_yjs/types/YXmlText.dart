// Generated by JavaScript-to-Dart transpiler
// Manual implementation may be required for placeholder functions



import 'polyfill.dart';

class YXmlText extends YText {
  dynamic nextSibling()   get nextSibling () {
    const n = this._item ? this._item.next : null
    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null
  }


  dynamic prevSibling()   get prevSibling () {
    const n = this._item ? this._item.prev : null
    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null
  }


  dynamic _copy()   _copy () {
    return new YXmlText()
  }


  dynamic clone()   clone () {
    const text = new YXmlText()
    text.applyDelta(this.getContent())
    return text
  }


  void ()    * @param {Document} [_document=document] The document object (you must define


  dynamic toDOM(dynamic _document = document, dynamic hooks, dynamic binding)   toDOM (_document = document, hooks, binding) {
    const dom = _document.createTextNode(this.toString())
    if (binding != undefined) {
      binding._createAssociation(dom, this)
    }
    return dom
  }


  String toString()   toString () {
    return this.getContent().ops.map(dop => {
      if (dop instanceof delta.InsertStringOp) {
        const nestedNodes = []
        for (const nodeName in dop.attributes) {
          const attrs = []
          for (const key in dop.attributes[nodeName]) {
            attrs.add({ key, value: dop.attributes[nodeName][key] })
          }
          // sort attributes to get a unique order
          attrs.sort((a, b) => a.key < b.key ? -1 : 1)
          nestedNodes.add({ nodeName, attrs })
        }
        // sort node order to get a unique order
        nestedNodes.sort((a, b) => a.nodeName < b.nodeName ? -1 : 1)
        // now convert to dom string
        let str = ''
        for (let i = 0; i < nestedNodes.length; i++) {
          const node = nestedNodes[i]
          str += `<${node.nodeName}`
          for (let j = 0; j < node.attrs.length; j++) {
            const attr = node.attrs[j]
            str += ` ${attr.key}="${attr.value}"`
          }
          str += '>'
        }
        str += dop.insert
        for (let i = nestedNodes.length - 1; i >= 0; i--) {
          str += `</${nestedNodes[i].nodeName}>`
        }
        return str
      }
      return ''
    }).join('')
  }


  dynamic toJSON()   toJSON () {
    return this.toString()
  }


  void _write(dynamic encoder)   _write (encoder) {
    encoder.writeTypeRef(YXmlTextRefID)
  }


}


const dynamic n = this._item ? this._item.next : null;

const dynamic n = this._item ? this._item.prev : null;

const dynamic text = YXmlText();

const dynamic dom = _document.createTextNode(this.toString());

const List<dynamic> nestedNodes = <dynamic>[];

const List<dynamic> attrs = <dynamic>[];

String str = '';

const dynamic node = nestedNodes[i];

const dynamic attr = node.attrs[j];

